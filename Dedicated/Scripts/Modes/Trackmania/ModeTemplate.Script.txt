/**
* ModeTemplate
* a template to kickstart gamemode development
* When going into production, swap the comments on the lines below
*/

#RequireContext CSmMode

#Extends "Libs/Beu/ModeLibs/TM_DebugMode.Script.txt"
// #Extends "Libs/Zerax/ModeLibs/BaseModes/ModeBase.Script.txt"

#Include "MathLib" 	as ML
#Include "TextLib" 	as TL
#Include "ColorLib" as CL

#Include "Libs/ModeTemplate/UI/UI.Script.txt" 															as UI
#Include "Libs/Nadeo/CMGame/Modes/Legacy/Pause.Script.txt" 											as Pause
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Server.Script.txt" as UIModules
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/Countdown_Server.Script.txt" as UIModules_Countdown
#Include "Libs/Nadeo/TMGame/Modes/Race.Script.txt" as Race
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/Helpers_Server.Script.txt" as RaceHelpers

#Const	 CompatibleMapTypes	"TrackMania\\TM_Race,TM_Race"										// accept default map types
#Const	 Version						"2023-01-15"																		// use current date as version number
#Const	 ScriptName					"Modes/TrackMania/ModeTemplate.Script.txt"  		// set to match this filename

#Setting S_FinishTimeout 	10

declare Boolean G_FirstFinish;
declare Boolean Private_MatchIsRunning;
declare Boolean Private_WarmUpIsRunning;
declare Boolean Private_PauseIsRunning;

/**
* Sets the EndTime but also sends it to the clients over netwrite
*/
Void SetEndTime(Integer _EndTime) {
	EndTime = _EndTime;
	RaceHelpers::SetTimeLimit(_EndTime);
}

/**
* Init Player
*/
Void Player_Init(CSmPlayer _Player) {
	_Player.Dossard_Number = " ";  // remove dossard number
	_Player.Dossard_Color = TL::ToColor("FFF");
	_Player.TrustClientSimu = True; // set to False if you intent to use collision
	_Player.UseCrudeExtrapolation = True;
	_Player.ForceModelId = NullId; // set custom skins here
	//Race::ApplyNetworkMode(_Player);
}

/**
* Spawns a Player
*/
Void Player_Spawn(CSmPlayer _Player) {
	Player_Init(_Player);

	declare CMapLandmark SpawnLandmark = MapLandmarks_PlayerSpawn[0]; // set the landmark to spawn the player here.
	if (SpawnLandmark == Null) return;
	Race::Start(_Player, SpawnLandmark, 1, Now + 1500);
}

/**
* Implement rules to spawn player here
*/
Boolean Player_CanSpawn(CSmPlayer _Player) {
	if (_Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) return False;
	if (Private_MatchIsRunning) return True;
	if (Private_WarmUpIsRunning) return True;

	return False;
}

/**
* On Request respawn
*/
Void OnPlayerRequestsRespawn(CSmPlayer _Player) {
	if (Player_CanSpawn(_Player)) Player_Spawn(_Player);
}

/**
* On Player Connect
*/
Void OnPlayerAdded(CSmPlayer _Player) {
	UI::SetModuleStatus(_Player, True);
	// @todo implement missing features
}

/**
* On Player Disconnect
*/
Void OnPlayerRemoved(CUser _User) {
	log("user left:" ^ _User.Name);
}


/**
* Helper to set warmup status
*/
Void SetWarmupStatus(Boolean _Status) {
	Private_WarmUpIsRunning = _Status;
	declare netwrite Boolean Net_WarmUpIsRunning for Teams[0] = _Status;
	Net_WarmUpIsRunning = _Status;
}

/**
* Helper to set pause status
*/
Void SetPauseStatus(Boolean _Status) {
	Private_PauseIsRunning = _Status;
	Pause::SetActive(_Status);
	declare netwrite Boolean Net_PauseIsRunning for Teams[0] = _Status;
	Net_PauseIsRunning = _Status;
}

/**
* Helper to get player from uuid
*/
CSmPlayer GetPlayerFromUuid(Text _Uuid) {
	foreach(Player in AllPlayers) {
		if (Player.User.WebServicesUserId == _Uuid) return Player;
	}

	return Null;
}


/**
* Use this instead of MB_Sleep to catch Player disconnectes and connects.
*/
Void Sleep(Integer _Duration) {
	declare Integer End = Now + _Duration;
	while (Now < End && MB_ServerIsRunning())  {
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CSmModeEvent::EType::OnPlayerAdded: OnPlayerAdded(Event.Player);
				case CSmModeEvent::EType::OnPlayerRemoved: OnPlayerRemoved(Event.User);
			}
		}
		MB_Yield();
	}
}

/**
* Pause!
*/
Void DoPause() {
	StartTime = Now + 1500;
	SetEndTime(-1);
	+++StartPause+++
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
	UI::ShowPause();
	while (Pause::IsActive()) {
		+++PauseLoop+++
		MB_Yield();
	}
	StartTime = -1;
	+++EndPause+++
	UI::HidePause();
	MB_StopRound();
}

// Labels

***ServerStart***
***
SetPauseStatus(False);
SetWarmupStatus(False);
SetEndTime(-1);
***


***Settings***
***
UI::InitSettings();
***


***LoadLibraries***
***
Race::Load(True,True,True,False,False);
Pause::Load();
Pause::SetAvailability(True);
***


***LoadHud***
***
UI::Load();

***


***InitMap***
***
Race::UseAutomaticDossardColor(False);
Race::SetLocalMode(False);
Race::SetSplitScreen(False);
MB_Synchro();
Scores_SetSortCriteria(CSmMode::ESmScoreSortOrder::BestRace);
foreach(_Player in AllPlayers) {
	UI::SetModuleStatus(_Player, True);
}
UIManager.UIAll.UISequence = CUIConfig::EUISequence::PlayersPresentation;
MatchEndRequested = False;
***


***AfterLoadMap***
***
Race::AfterLoadMap(Map);
***

***StartMap***
***
Sleep(1500);

Race::ResetAllPlayers();
StartTime = Now; 		// Start time has to be set otherwise cannot spawn players
SetEndTime(-1);

***


***StartMatch***
***
Private_MatchIsRunning = True;
***

***StartRound***
***
Race::ResetAllPlayers();

// Run pause, if needed
if (Pause::IsActive()) {
	DoPause();
}
// Othervice announce round start
else {
	UI::QueueBigMessage("""$f90Round Start""", 5000, 1);
	Sleep(5000);
	G_FirstFinish = False;
	StartTime = Now + 1500;
	SetEndTime(-1);
}
***


***StartTurn***
***
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
Sleep(3000);
***


***EndTurn***
***
SetEndTime(-1);
***


***AfterEndTurn***
***
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
Sleep(1500);
***


***EndRound***
***
foreach(_Player in Players) {
	Race::Wait(_Player, True);
}

***


***EndMap***
***
declare Boolean Donothing; // @todo remove when you implement logic here
***


***EndMatch***
***
Private_MatchIsRunning = False;
***


***PlayLoop***
***
// Handle events
foreach (Event in PendingEvents) {
	if(Event.GiveUp) {
		Race::Wait(Event.Player, True);
	}
	switch (Event.Type) {
		case CSmModeEvent::EType::OnPlayerAdded: OnPlayerAdded(Event.Player);
		case CSmModeEvent::EType::OnPlayerRemoved: OnPlayerRemoved(Event.User);
		case CSmModeEvent::EType::OnPlayerTriggersWaypoint: {
			if (Event.IsFinish) {
				if (!G_FirstFinish) {
					G_FirstFinish = True;
					SetEndTime(Now + S_FinishTimeout * 1000);
				}
				if (Event.Player != Null) {
					Race::Wait(Event.Player, True);
				}
			}
		}
	}
}

foreach (_Player in Players) {
	if (Player_CanSpawn(_Player)) Player_Spawn(_Player);
}

// Pause activation
if (Pause::IsActive()) {
	Private_ForceEndRound = True;
}

// Set Round to stop, if current timer has reached endtime.
if (EndTime != -1 && Now >= EndTime) {
	MB_StopRound();
}
***


***PauseLoop***
***
// Handle events
foreach (Event in PendingEvents) {
	if(Event.GiveUp) {
		Race::Wait(Event.Player, True);
	}
	switch (Event.Type) {
		case CSmModeEvent::EType::OnPlayerAdded: OnPlayerAdded(Event.Player);
		case CSmModeEvent::EType::OnPlayerRemoved: OnPlayerRemoved(Event.User);
		case CSmModeEvent::EType::OnPlayerTriggersWaypoint: {
			if (Event.IsFinish) {
				if (Event.Player != Null) {
					Race::Wait(Event.Player, True);
				}
			}
		}
	}
}

// Spawn players
foreach (Player in Players) {
	if (Player_CanSpawn(Player)) Player_Spawn(Player);
}
***


***Yield***
***
foreach (XmlRpcEvent in XmlRpc.PendingEvents) {
	switch (XmlRpcEvent.Type) {
		case CXmlRpcEvent::EType::CallbackArray: {
			switch (XmlRpcEvent.ParamArray1) {
				case "Trackmania.ForceEndRound": {
					Private_ForceEndRound = True;
				}
			}
		}
	}
}
Race::Yield();
Pause::Yield();
UIModules::Yield();

if (Private_ForceEndRound) {
	Private_ForceEndRound = False;
	Private_IsForcedEndRound = True;
	MB_StopRound();
}

declare Integer MB_Race_PreviousEndTime for This = -2;
if (MB_Race_PreviousEndTime != EndTime) {
	MB_Race_PreviousEndTime = EndTime;
	UIModules_Countdown::SetTimeLimit(EndTime);
}
***

// This has to be here for maniascript engine to work right
Void Private_doNothing() {
	declare Integer DoNothing = 0;
	if (DoNothing == 0) {
		DoNothing = 1;
	}
}
